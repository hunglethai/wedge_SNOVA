SetAutoColumns(false);
SetColumns(0);
////////////////////////////////////////////////////////////////////////
//  SNOVA – wedge experiment      
////////////////////////////////////////////////////////////////////////
procedure SnovaExperiment(n, v, m, l)
    //////////////// ❶ PARAMETERS //////////////////////////////////////////////////
    q  := 16;
    Ln := n*l;  
    F  := GF(q);
    o  := n - v;        // “oil” dimension
    printf "[params]  v+o = %o,  v = %o,  m = %o,  l = %o\n", n, v, m, l;

    ////////////////////////////////////////////////////////////////////////
    // ❷  GENERATE  S‑MATRICES   (symmetric, char‑poly irreducible)
    ////////////////////////////////////////////////////////////////////////
    function RandomSymmetricIrredCharpolyMatrix(F, l : max_attempts := 10^5)
        for attempt in [1..max_attempts] do
            M := ZeroMatrix(F, l, l);
            for i in [1..l] do
                for j in [i..l] do
                    a := Random(F);
                    M[i][j] := a;
                    M[j][i] := a;
                end for;
            end for;
            if Determinant(M) eq 0 then continue; end if;
            if IsIrreducible(CharacteristicPolynomial(M)) then
                return M;
            end if;
        end for;
        // error "No symmetric irreducible-charpoly matrix found";
    end function;

    // Use only the matrix we need for this run
    S := RandomSymmetricIrredCharpolyMatrix(F, l);
    // printf "Generated S‑matrices for ℓ = %o over GF(%o)\n",l , q;

    // The splitting field  K = F[α]/(f)  of  S
    f         := CharacteristicPolynomial(S);
    K<a>  := ext<F | f>;                     //  K ≅ GF(2^ℓ)
    SK        := ChangeRing(S, K);               //  view S in K^(ℓ×ℓ)

    //  Change‑of‑basis matrices that diagonalise the symmetric S‑matrix

    function DiagonalisingBasisMatrices(S)
        l  := Nrows(S);
        assert Ncols(S) eq l;

        // 1.  The ℓ conjugate roots of f in K are α, α^2, …, α^(2^{ℓ‑1})
        q         := #F;                             
        lambdas   := [ a^(q^i) : i in [0..l-1] ];      // distinct

        // 2.  Build U column‑wise from eigen‑vectors
        if l eq 1 then
            // over any finite field K, the 1×1 identity is just [1]
            U := IdentityMatrix(K, 1);
        else
            U := ZeroMatrix(K, l, l);
            for i in [1..l] do
                z    := lambdas[i];
                V    := Nullspace(SK - z*IdentityMatrix(K, l));
                v    := Basis(V)[1];                    // a non‑zero eigenvector
                vmat := Matrix(K, l, 1, Eltseq(v));    // ℓ×1 matrix
                InsertBlock(~U, vmat, 1, i);            // stick it in column i
            end for;
        end if;

        return U^-1, U;
    end function;

    U, UInversed := DiagonalisingBasisMatrices(S);

    // Build the change-of-basis matrix Un = Diag(U,..,U)
    Un := U;
    for k in [2..n] do
        Un := DiagonalJoin(Un, U);
    end for;
    UnInversed := UInversed;
    for k in [2..n] do
        UnInversed := DiagonalJoin(UnInversed, UInversed);
    end for;

    ////////////////////////////////////////////////////////////////////////
    // ❸  RANDOM ELEMENT  F_q[S]  (ℓ×ℓ matrix over F)
    ////////////////////////////////////////////////////////////////////////
    RandFqS := function()
        return &+[ Random(F) * S^(i-1) : i in [1..l] ];
    end function;

    ////////////////////////////////////////////////////////////////////////
    // ❹  POLYNOMIAL RING  R ≅ F[x_{r,i,j}]  
    ////////////////////////////////////////////////////////////////////////
    // -----  build  R = F[x_0, …, x_{Nvars-1}] ----- //
    Nvars := v*n*l;
    R     := PolynomialRing(K, Nvars);
    names := [ Sprintf("x%o%o%o", r,i,j)
                : r in [0..v-1], i in [0..n-1], j in [0..l-1] ];
    AssignNames(~R, names);

    // helper to map (r,i,j) → generator index (Magma is 1‑based)
    Idx := function(r,i,j) return r*n*l + i*l + j + 1; end function;
    Var := function(r,i,j) return R.(Idx(r,i,j)); end function;

    // ////////////////////////////////////////////////////////////////////////
    // //  ❹  BUILD THE BIG VARIABLE MATRIX  X (i.e. V) (v × n blocks)
    // ////////////////////////////////////////////////////////////////////////

    DiagonalBlock := function(r, i)
        M := ZeroMatrix(R, l, l);
        for a in [1..l] do
            M[a][a] := Var(r, i, a-1);
        end for;
        return M;
    end function;

    blockrows := [ [ DiagonalBlock(r-1,i-1) : i in [1..n] ] : r in [1..v] ];
    rowcat    := [ HorizontalJoin(seq) : seq in blockrows ];
    X         := VerticalJoin(rowcat);

    ////////////////////////////////////////////////////////////////////////
    //  ❺ SNOVA PUBLIC MATRICES  Q₁,…,Q_m
    ////////////////////////////////////////////////////////////////////////

    function SnovaPublicMatrices(n, v, m, l, S)
        o := n - v;
        //---------- F_q[S] ----------
        RandFqS   := func< |
            &+[ Random(F) * S^(i-1) : i in [1..l] ] >;

        //---------- SNOVA permutation matrices z(S^j) ----------------------
        Lambda := function(Q)
            // Build block-diagonal matrix with n copies of Q
            M := Q;
            for i in [2..n] do
                M := DiagonalJoin(M, Q);
            end for;
            return M;
        end function;
        LambdaS := [ Lambda(S^(i-1)) : i in [1..l] ];

        //---------- 1. central matrix F with zero oil–oil block ------------
        RandF := function()
            F11 := RandomMatrix(F,v*l,v*l);
            F12 := RandomMatrix(F,v*l,o*l);
            F21 := RandomMatrix(F,o*l,v*l);
            ZZ  := ZeroMatrix(F, o*l, o*l);

            Row1 := HorizontalJoin(F11, F12);
            Row2 := HorizontalJoin(F21, ZZ);
            return VerticalJoin(Row1, Row2);
        end function;

        Flist := [ RandF() : k in [1..m] ];

        //---------- 2. upper‑triangular hiding matrix  T -------------------
        Tvo := BlockMatrix(v, o, [ RandFqS() : k in [1..v*o] ]);
        Iv  := IdentityMatrix(F, v*l);
        Io  := IdentityMatrix(F, o*l);
        Zvo := ZeroMatrix(F, o*l, v*l);

        Row1 := HorizontalJoin(Iv,  Tvo);
        Row2 := HorizontalJoin(Zvo, Io);
        T    := VerticalJoin(Row1, Row2);

        //---------- 3. final public skew‑sym. forms ------------------------
        Plist := [ Transpose(T) * Fmat * T : Fmat in Flist ];
        Qlist := [];
        for P in Plist do
            SymP := P + Transpose(P);
            for Lj in LambdaS do
                for Lk in LambdaS do
                    Append(~Qlist, Lj * SymP * Lk);
                end for;
            end for;
        end for;

        return Qlist;
    end function;

    function SnovaPublicMatrices_naive(n, v, m, l, S)
        o := n - v;
        //---------- F_q[S] ----------
        RandFqS   := func< |
            &+[ Random(F) * S^(i-1) : i in [1..l] ] >;

        //---------- 1. central matrix F with zero oil–oil block ------------
        RandF := function()
            F11 := RandomMatrix(F,v*l,v*l);
            F12 := RandomMatrix(F,v*l,o*l);
            F21 := RandomMatrix(F,o*l,v*l);
            ZZ  := ZeroMatrix(F, o*l, o*l);

            Row1 := HorizontalJoin(F11, F12);
            Row2 := HorizontalJoin(F21, ZZ);
            return VerticalJoin(Row1, Row2);
        end function;

        Flist := [ RandF() : k in [1..m*l*l] ];

        //---------- 2. upper‑triangular hiding matrix  T -------------------
        Tvo := BlockMatrix(v, o, [ RandFqS() : k in [1..v*o] ]);
        Iv  := IdentityMatrix(F, v*l);
        Io  := IdentityMatrix(F, o*l);
        Zvo := ZeroMatrix(F, o*l, v*l);

        Row1 := HorizontalJoin(Iv,  Tvo);
        Row2 := HorizontalJoin(Zvo, Io);
        T    := VerticalJoin(Row1, Row2);

        //---------- 3. final public skew‑sym. forms ------------------------
        Qlist := [ Transpose(T) * (Fmat + Transpose(Fmat)) * T : Fmat in Flist ];

        return Qlist;
    end function;

    Q_original := SnovaPublicMatrices(n,v,m,l,S);
    Qlist := [ Un * Q * UnInversed: Q in Q_original ];
    // Qlist := SnovaPublicMatrices_naive(n,v,m,l,S);

    ////////////////////////////////////////////////////////////////////////
    //  ❻  vl×vl  MINORS  OF  X
    ////////////////////////////////////////////////////////////////////////
    vl    := v*l;
    rowsC := [1..vl];

    function Minor(I)                       // I = *sequence* of col‑indices
        cols := [ i+1 : i in I ];           // → 1‑based
        return Determinant( Submatrix(X, rowsC, cols) );
    end function;

    Minors := AssociativeArray();
    for I in Subsets({0..Ln-1}, vl) do      // I = *set* of integers
        seqI          := SetToSequence(I);  // convert once, keep order
        Minors[I]     := Minor(seqI);
    end for;

    mvals   := [ Minors[K] : K in Keys(Minors) ];
    nonzero := #[ v : v in mvals | v ne 0 ];
    printf "%o / %o minors are non‑zero\n", nonzero, #Minors;

    ////////////////////////////////////////////////////////////////////////
    //  ❼  BUILD THE EQUATIONS  (wedging with each Q)
    ////////////////////////////////////////////////////////////////////////
    eqns := [];
    for QQ in Qlist do
        for J in Subsets({0..Ln-1}, vl+2) do
            coeff := R!0;
            seqJ  := SetToSequence(J);                // ascending order

            for aidx in [1..#seqJ-1] do
                for bidx in [aidx+1..#seqJ] do
                    a := seqJ[aidx];
                    b := seqJ[bidx];
                    sign  := (-1)^(bidx - aidx - 1);

                    // columns left after removing a and b
                    Iseq  := [ seqJ[k] : k in [1..#seqJ] | k ne aidx and k ne bidx ];
                    Iset  := SequenceToSet(Iseq);

                    minor := Minors[Iset];
                    coeff +:= sign * QQ[a+1][b+1] * minor;
                end for;
            end for;

            Append(~eqns, coeff);
        end for;
    end for;
    printf "Generated %o equations\n", #eqns;

    ////////////////////////////////////////////////////////////////////////
    //  ❽  MACAULAY MATRIX  (target degree  = v*l)
    ////////////////////////////////////////////////////////////////////////

    // 1. Prepare an associative array to give each monomial a tiny “column index”
    mon2col := AssociativeArray();  
    nextCol := 1;

    // 2. Start with an empty sparse matrix over K
    M := SparseMatrix(K);    // 0×0 to start

    // 3. Walk through the equations, assigning columns on the fly
    interval := Max(1, Floor(#eqns/100));
    startCPU := Cputime();

    for r in [1..#eqns] do
        poly := eqns[r];
        cfs  := Coefficients(poly);
        ms   := Monomials(poly);
        for k in [1..#ms] do
            E := Exponents(ms[k]);   // exponent sequence of length Nvars

            // if we haven't yet seen this exact monomial, give it the next column
            if not IsDefined(mon2col, E) then
                mon2col[E] := nextCol;
                nextCol +:= 1;
            end if;

            // insert the coefficient into row r, that (new) column
            SetEntry(~M, r, mon2col[E], cfs[k]);
        end for;
        // — report progress every `interval` iterations, and at the end —
        if r mod interval eq 0 or r eq #eqns then
            totalSec := Cputime() - startCPU;                 // Real
            pct      := Floor(100 * r / #eqns);               // integer %
            elapsed  := Floor(totalSec);                      // integer seconds
            eta      := r gt 0 
                    select Floor((#eqns - r) * totalSec / r) 
                    else 0;                                // integer seconds

            printf
            "Processed %o/%o (%o%%)  elapsed: %o s  ETA: %o s\n",
            r, #eqns, pct, elapsed, eta;
        end if;
    end for;

    rankM := Rank(M);   

    // Counting actual nonzero rows in M
    nonzerorows := #[ r : r in [1..Nrows(M)] | exists{ j : j in [1..Ncols(M)] | M[r,j] ne 0 } ];

    // Counting actual nonzero cols in M
    // nonzerocols := #[ r : r in [1..Nrows(Transpose(M))] | exists{ j : j in [1..Ncols(Transpose(M))] | Transpose(M)[r,j] ne 0 } ];
    nonzerocols := "NA";

    // ---------- computing expected formula for number of nonzero rows -----------------
    Bin  := Binomial;
    Prod := func<seq| &*seq>;
    // ---------- all weak‑compositions of n into k parts -----------------
    function NonNegVectors(n, k)        // returns a seq of seq
        if k eq 0 then
            return n eq 0 select [* [* *] *] else [* *];
        elif k eq 1 then
            return [* [* n *] *];
        else
            res := [* *];
            for first in [0..n] do
                for tail in NonNegVectors(n-first, k-1) do
                    Append(~res, [* first *] cat tail);  
                end for;
            end for;
            return res;
        end if;
    end function;

    function expected_non_zero_rows(m,v,o,l)
        coeff := m*l*l;
        inner := 0;
        for vec in NonNegVectors(2, l) do 
            inner +:= Prod([ Bin(v+o, v+aj) : aj in vec ]);
        end for;
        return coeff*inner;
    end function;
    // Expected non zeros rows
    expectednonzerorows := expected_non_zero_rows(m,v,o,l);
    // Number of duplicated rows
    numrowsDuplicates := Nrows(M)
               - #SequenceToSet([ M[i] : i in [1..Nrows(M)] ]);
    // // Number of duplicated cols
    // numcolsDuplicates := Nrows(Transpose(M))
    //            - #SequenceToSet([ Transpose(M)[i] : i in [1..Nrows(Transpose(M))] ]);
    numcolsDuplicates := "NA";

    printf "Rank(M) = %o  (size %o × %o); non-zero rows = %o (expected = %o), non-zero cols = %o; duplicated rows = %o, duplicated cols = %o \n", 
        rankM, Nrows(M), Ncols(M), nonzerorows, expectednonzerorows, nonzerocols, numrowsDuplicates, numcolsDuplicates;
    ////////////////////////////////////////////////////////////////////////
    //  ❾  COMBINATORIAL SUMS  (Hypotheses 1–4)
    ////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////// Hyp 1
    function Hyp1(m,v,o,l)
        sum := 0;
        out  := [];
        up   := Floor(o*l/2) + 1;
        for i in [1..up] do
            coeff := (-1)^i * Bin(m*l + i - 1, i);
            inner := 0;
            for vec in NonNegVectors(2*i, l) do 
                inner +:= Prod([ Bin(v+o, v+aj) : aj in vec ]);
            end for;
            sum -:= coeff*inner;
            Append(~out, <i, sum>);
        end for;
        return out;
    end function;

    ///////////////////////////////////////////////////////////////// Hyp 2
    function Hyp2(m,v,o,l)
        sum := 0;
        out  := [];
        up   := Floor(o*l/2) + 1;
        for i in [1..up] do
            coeff := (-1)^i * Bin(m + i - 1, i);
            inner := 0;
            for vec in NonNegVectors(2*i, l) do 
                inner +:= Prod([ Bin(v+o, v+aj) : aj in vec ]);
            end for;
            sum -:= coeff*inner;
            Append(~out, <i, sum>);
        end for;
        return out;
    end function;

    ///////////////////////////////////////////////////////////////// Hyp 3
    function Hyp3(m,v,o,l)
        return [ Binomial(l*n, v) -
                &+[ (-1)^i * Bin(m*l*l + i - 1, i) * Bin(v+o, v+2*i)
                    : i in [0..t] ]
            : t in [0..Floor(o/2)] ];
    end function;

    printf "Hypothesis 1 (Ray's l-scaled formula): %o\n", Hyp1(m,v,o,l);

    printf "Hypothesis 2 (Ray's no-l formula): %o\n", Hyp2(m,v,o,l);

    printf "Hypothesis 3 (plain UOV formula): %o\n", Hyp3(m, l*v, l*o, l);

    ////////////////////////////////////////////////////////////////////////
    //               ———   END   ——————————————————————————————
    ////////////////////////////////////////////////////////////////////////
end procedure;

// Parameter sets
ParameterSets := [
    <11, 6, 5, 1>,
    <10, 7, 4, 1>,
    <10, 7, 5, 1>,
];

// Loop through each set
for ps in ParameterSets do
    SnovaExperiment(ps[1], ps[2], ps[3], ps[4]);
end for;